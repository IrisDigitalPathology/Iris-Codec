name: Construct Linux Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm]
        build_type: [Release]
        include:
          - arch: arm64
          - os: ubuntu-24.04-arm
            name: ubuntu
            arch: aarch64
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            name: ubuntu
            arch: x86_64
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/output" >> "$GITHUB_OUTPUT"

    - name: Fetch JpegTurbo
      run: |
        sudo apt install yasm -y &&
        git clone --depth 1 https://github.com/libjpeg-turbo/libjpeg-turbo.git &&
        cmake -B ./libjpeg-turbo/build -DCMAKE_INSTALL_PREFIX='/usr/local' ./libjpeg-turbo &&
        cmake --build ./libjpeg-turbo/build --config ${{ matrix.build_type }} -j$CPU_COUNT &&
        sudo cmake --install ./libjpeg-turbo/build
    
    - name: Fetch Dependencies
      run: |
        sudo apt install libavif-dev openslide-tools python3-dev yasm -y

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-dir }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j$CPU_COUNT &&
        cmake --install ${{ steps.strings.outputs.build-output-dir }}

    - name: Package 
      run: |
        cp ${{ github.workspace }}/LICENSE ${{ steps.strings.outputs.install-dir }} &&
        cp ${{ github.workspace }}/README.md ${{ steps.strings.outputs.install-dir }} &&
        tar -cvf iris-codec-${{ matrix.name }}-${{ matrix.arch }}.tar.gz -C ${{ steps.strings.outputs.install-dir }} .

    - name: Upload Release Artifact
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
      run: |
        gh release upload ${{ github.ref_name }} iris-codec-${{ matrix.name }}-${{ matrix.arch }}.tar.gz
