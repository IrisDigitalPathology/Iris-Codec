name: Construct Windows Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      matrix:
        os: [windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            name: win
            arch: x86_64


    steps:
    - uses: actions/checkout@v4
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/output" >> "$GITHUB_OUTPUT"

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
          
    - name: Configure vcpkg
      env: 
        VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
      run: |
        git clone --depth 1 https://github.com/microsoft/vcpkg.git ${{ github.workspace }}\vcpkg && 
        ${{ github.workspace }}\vcpkg\bootstrap-vcpkg.bat &&
        ${{ github.workspace }}\vcpkg\vcpkg.exe install libjpeg-turbo libavif
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -GNinja -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_PREFIX_PATH=${{ github.workspace }}/vcpkg/installed/x64-windows
        -DCMAKE_INSTALL_PREFIX=${{ steps.strings.outputs.install-dir }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} &&
        cmake --install ${{ steps.strings.outputs.build-output-dir }}

    - name: Package 
      run: |
        cp ${{ github.workspace }}/LICENSE ${{ steps.strings.outputs.install-dir }} &&
        cp ${{ github.workspace }}/README.md ${{ steps.strings.outputs.install-dir }} &&
        tar -cvf iris-codec-${{ matrix.name }}-${{ matrix.arch }}.tar.gz -C ${{ steps.strings.outputs.install-dir }} .

    - name: Upload Release Artifact
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
      run: |
        gh release upload ${{ github.ref_name }} iris-codec-${{ matrix.name }}-${{ matrix.arch }}.tar.gz
